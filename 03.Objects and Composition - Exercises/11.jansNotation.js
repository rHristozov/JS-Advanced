function solve(arr) {
    // Създаваме обект, който съхранява функциите за изчисление за всеки оператор

    const calcMap = {
        '+': (a, b) => a + b, // Функция за събиране: връща сумата на числата
        '-': (a, b) => b - a, // Функция за изваждане: изважда първото число от второто
        '*': (a, b) => a * b, // Функция за умножение: връща произведението
        '/': (a, b) => b / a  // Функция за деление: дели второто число на първото
    };

    // Създаваме копие на входния масив
    // Защо копие? За да не модифицираме оригиналния масив, като го обхождаме.
    let r = [...arr];

    // Масив за съхранение на операндите (числата, които ще използваме за изчисленията)
    const numbers = [];

    // Обхождаме всички елементи в копирания масив
    for (let i = 0; i <= arr.length; i++) {
        // Проверяваме дали сме достигнали края на масива
        if (i === arr.length) {
            // Ако има само едно число в numbers, това е резултатът
            if (numbers.length === 1) {
                return numbers[0]; // Връщаме резултата
            } else {
                // Ако има повече от едно число, значи операторите са недостатъчни
                return 'Error: too many operands!';
            }
        }

        // Проверяваме дали текущият елемент е число
        if (typeof r[i] === 'number') {
            // Добавяме числото към масива numbers
            numbers.push(r[i]);
        } else {
            // Ако текущият елемент е оператор
            const operand = r[i]; // Съхраняваме текущия оператор

            // Проверяваме дали има поне две числа в numbers
            if (numbers.length < 2) {
                // Ако няма достатъчно числа за изчисление, връщаме грешка
                return 'Error: not enough operands!';
            } else {
                // Извличаме последните две числа от numbers
                // Защо използваме pop()? За да получим най-новите добавени числа.
                let result = calcMap[operand](numbers.pop(), numbers.pop());

                // Добавяме резултата обратно в масива numbers
                // Защо? Резултатът може да се използва в следваща операция.
                numbers.push(result);
            }
        }
    }
}